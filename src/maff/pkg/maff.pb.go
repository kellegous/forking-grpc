// Code generated by protoc-gen-go. DO NOT EDIT.
// source: maff.proto

package pkg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProductReq struct {
	Items                []int64  `protobuf:"varint,1,rep,packed,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductReq) Reset()         { *m = ProductReq{} }
func (m *ProductReq) String() string { return proto.CompactTextString(m) }
func (*ProductReq) ProtoMessage()    {}
func (*ProductReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_maff_2a39cfb8e54b84af, []int{0}
}
func (m *ProductReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductReq.Unmarshal(m, b)
}
func (m *ProductReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductReq.Marshal(b, m, deterministic)
}
func (dst *ProductReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductReq.Merge(dst, src)
}
func (m *ProductReq) XXX_Size() int {
	return xxx_messageInfo_ProductReq.Size(m)
}
func (m *ProductReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductReq.DiscardUnknown(m)
}

var xxx_messageInfo_ProductReq proto.InternalMessageInfo

func (m *ProductReq) GetItems() []int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

type ProductRes struct {
	Product              int64    `protobuf:"varint,1,opt,name=product,proto3" json:"product,omitempty"`
	Duration             int64    `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductRes) Reset()         { *m = ProductRes{} }
func (m *ProductRes) String() string { return proto.CompactTextString(m) }
func (*ProductRes) ProtoMessage()    {}
func (*ProductRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_maff_2a39cfb8e54b84af, []int{1}
}
func (m *ProductRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductRes.Unmarshal(m, b)
}
func (m *ProductRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductRes.Marshal(b, m, deterministic)
}
func (dst *ProductRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductRes.Merge(dst, src)
}
func (m *ProductRes) XXX_Size() int {
	return xxx_messageInfo_ProductRes.Size(m)
}
func (m *ProductRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductRes.DiscardUnknown(m)
}

var xxx_messageInfo_ProductRes proto.InternalMessageInfo

func (m *ProductRes) GetProduct() int64 {
	if m != nil {
		return m.Product
	}
	return 0
}

func (m *ProductRes) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*ProductReq)(nil), "pkg.ProductReq")
	proto.RegisterType((*ProductRes)(nil), "pkg.ProductRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MaffClient is the client API for Maff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MaffClient interface {
	GetProduct(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductRes, error)
}

type maffClient struct {
	cc *grpc.ClientConn
}

func NewMaffClient(cc *grpc.ClientConn) MaffClient {
	return &maffClient{cc}
}

func (c *maffClient) GetProduct(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductRes, error) {
	out := new(ProductRes)
	err := c.cc.Invoke(ctx, "/pkg.Maff/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaffServer is the server API for Maff service.
type MaffServer interface {
	GetProduct(context.Context, *ProductReq) (*ProductRes, error)
}

func RegisterMaffServer(s *grpc.Server, srv MaffServer) {
	s.RegisterService(&_Maff_serviceDesc, srv)
}

func _Maff_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaffServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.Maff/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaffServer).GetProduct(ctx, req.(*ProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Maff_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.Maff",
	HandlerType: (*MaffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _Maff_GetProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maff.proto",
}

func init() { proto.RegisterFile("maff.proto", fileDescriptor_maff_2a39cfb8e54b84af) }

var fileDescriptor_maff_2a39cfb8e54b84af = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x4d, 0x4c, 0x4b,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0xc8, 0x4e, 0x57, 0x52, 0xe2, 0xe2, 0x0a,
	0x28, 0xca, 0x4f, 0x29, 0x4d, 0x2e, 0x09, 0x4a, 0x2d, 0x14, 0x12, 0xe1, 0x62, 0xcd, 0x2c, 0x49,
	0xcd, 0x2d, 0x96, 0x60, 0x54, 0x60, 0xd6, 0x60, 0x0e, 0x82, 0x70, 0x94, 0x9c, 0x90, 0xd4, 0x14,
	0x0b, 0x49, 0x70, 0xb1, 0x17, 0x40, 0x78, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x30, 0xae,
	0x90, 0x14, 0x17, 0x47, 0x4a, 0x69, 0x51, 0x62, 0x49, 0x66, 0x7e, 0x9e, 0x04, 0x13, 0x58, 0x0a,
	0xce, 0x37, 0x32, 0xe3, 0x62, 0xf1, 0x4d, 0x4c, 0x4b, 0x13, 0xd2, 0xe3, 0xe2, 0x72, 0x4f, 0x2d,
	0x81, 0x1a, 0x27, 0xc4, 0xaf, 0x57, 0x90, 0x9d, 0xae, 0x87, 0x70, 0x80, 0x14, 0x9a, 0x40, 0x71,
	0x12, 0x1b, 0xd8, 0xad, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x95, 0x9a, 0xe9, 0xb9,
	0x00, 0x00, 0x00,
}
